## Walkerâ€™s test (plotting digit frequency for robust and non-robust subsets):

# Import data and libraries
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.data import DataLoader, TensorDataset
import numpy as np
import cvxpy as cp
from tqdm import tqdm
import matplotlib.pyplot as plt

# Set a random seed
np.random.seed(0)

# Load the saved robust and non-robust datasets
robust_dataset = torch.load("robust_dataset.pt")
non_robust_dataset = torch.load("non_robust_dataset.pt")

# Extract the data part from the robust and non-robust examples
X_robust = robust_dataset.tensors[0].numpy()
y_robust = robust_dataset.tensors[1].numpy()
X_non_robust = non_robust_dataset.tensors[0].numpy()
y_non_robust = non_robust_dataset.tensors[1].numpy()

# Display the images of the robust and non-robust vectors
plt.figure(figsize=(10, 5))

# Display robust image
plt.subplot(1, 2, 1)
plt.title("Robust Image")
plt.imshow(X_robust[0].reshape(28, 28), cmap='gray')
plt.axis('off')

# Display non-robust image
plt.subplot(1, 2, 2)
plt.title("Non-Robust Image")
plt.imshow(X_non_robust[0].reshape(28, 28), cmap='gray')
plt.axis('off')

plt.show()

# Plot the frequency of digit classifications for both subsets
plt.figure(figsize=(10, 5))

# Plot for robust subset
plt.subplot(1, 2, 1)
plt.title("Digit Frequency in Robust Subset")
plt.hist(y_robust, bins=np.arange(11) - 0.5, edgecolor='black')
plt.xticks(np.arange(10))
plt.xlabel("Digit")
plt.ylabel("Frequency")

# Plot for non-robust subset
plt.subplot(1, 2, 2)
plt.title("Digit Frequency in Non-Robust Subset")
plt.hist(y_non_robust, bins=np.arange(11) - 0.5, edgecolor='black')
plt.xticks(np.arange(10))
plt.xlabel("Digit")
plt.ylabel("Frequency")

plt.tight_layout()
plt.show()