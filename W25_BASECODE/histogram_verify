import torch
from torchvision import datasets, transforms
import numpy as np
import matplotlib.pyplot as plt  # Import Matplotlib for plotting
from tqdm import tqdm

# Load CIFAR-10 and MNIST datasets
def load_datasets():
    transform = transforms.Compose([transforms.ToTensor()])
    
    # CIFAR-10 dataset
    CIFAR10_data = datasets.CIFAR10("data", train=False, download=True, transform=transform)
    CIFAR10_loader = torch.utils.data.DataLoader(CIFAR10_data, batch_size=len(CIFAR10_data), shuffle=False)
    CIFAR10_images, _ = next(iter(CIFAR10_loader))  # Get all images
    CIFAR10_images = CIFAR10_images.view(CIFAR10_images.size(0), -1)  # Flatten images
    
    # MNIST dataset
    MNIST_data = datasets.MNIST("data", train=False, download=True, transform=transform)
    MNIST_loader = torch.utils.data.DataLoader(MNIST_data, batch_size=len(MNIST_data), shuffle=False)
    MNIST_images, _ = next(iter(MNIST_loader))  # Get all images
    MNIST_images = MNIST_images.view(MNIST_images.size(0), -1)  # Flatten images
    
    return CIFAR10_images, MNIST_images

# Generate random uniform distributions
def random_distribution(CIFAR10_images, MNIST_images):
    CIFAR10_random = torch.rand_like(CIFAR10_images)  # Random uniform distribution for CIFAR-10
    MNIST_random = torch.rand_like(MNIST_images)  # Random uniform distribution for MNIST
    return CIFAR10_random, MNIST_random

# Calculate L2 norm distance to the nearest vertex
def vertex_L2(data):
    nearest_vertex = torch.round(data)  # Scale and round to nearest vertex
    distances = torch.norm(data - nearest_vertex, dim=1)  # L2 norm distance
    return distances


# Main function
def main():
    pass  # Placeholder for main function logic

# Run the main function
if __name__ == "__main__":
    main()