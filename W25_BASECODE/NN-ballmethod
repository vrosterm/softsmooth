import torch
import numpy as np
import warnings

# Suppress the FutureWarning related to torch.load
warnings.filterwarnings("ignore", category=FutureWarning, message=".*weights_only=False.*")

# Load the robust and non-robust datasets
robust_dataset = torch.load("robust_dataset.pt")
non_robust_dataset = torch.load("non_robust_dataset.pt")

# Extract the data part from the robust and non-robust examples
X_robust = robust_dataset.tensors[0]
X_non_robust = non_robust_dataset.tensors[0]

# Calculate the mean of the robust data points
xbar = X_robust.mean(dim=0)
print(xbar.shape) # should be 784 dim vector

# Function to calculate the Euclidean distance
def euclidean_distance(x1, x2):
    return torch.norm(x1 - x2, p=2)

# Bisection method to find the smallest radius containing all robust data points
def find_radius(X_robust, xbar, r_min=0, r_max=100, k_max=100):
    for _ in range(k_max):
        r = (r_min + r_max) / 2
        if all(euclidean_distance(x, xbar) <= r for x in X_robust):
            r_max = r
        else:
            r_min = r
        r = (r_min + r_max) / 2
    return r

# Find the smallest radius
r = find_radius(X_robust, xbar)

# Check if all non-robust data points are outside the ball
def check_separability(X_non_robust, xbar, r):
    return all(euclidean_distance(x, xbar) > r for x in X_non_robust)

# Perform the separability test
if check_separability(X_non_robust, xbar, r):
    print("Convexly separable.")
else:
    print("Test failed.")